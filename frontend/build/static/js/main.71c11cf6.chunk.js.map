{"version":3,"sources":["components/chart.jsx","components/main.jsx","components/stock-info.jsx","App.js","reportWebVitals.js","index.js"],"names":["Chart","_ref","companyName","sector","data","setData","useState","console","log","useEffect","async","response","fetch","result","json","error","fetchData","React","createElement","x_axis","past","main","dates","y_axis","prices","xlk_x_axis","XLK","xlk_y_axis","vgt_x_axis","VGT","vgt_y_axis","chart_data","name","x","y","type","mode","marker","color","line","dash","width","Plot","layout","height","xaxis","title","showgrid","yaxis","showline","paper_bgcolor","plot_bgcolor","font_color","options","value","label","Main","company","setCompany","displaySentiment","setDisplaySentiment","displayInfo","setDisplayInfo","id","onSubmit","event","preventDefault","info_response","info_data","Object","keys","info","length","Error","stock_info","currency","currentPrice","fiftyTwoWeekHigh","fiftyTwoWeekLow","sentiment_response","sentiment_data","sentiment","onChange","target","map","option","key","App","className","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.71c11cf6.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Plot from 'react-plotly.js';\n\n\nexport default function Chart({companyName, sector}) {\n    const [data, setData] = useState(null);\n    console.log(\"Company is\", companyName)\n    useEffect(() => {\n            async function fetchData() {\n                try {\n                    const response = await fetch(`http://127.0.0.1:8000/chart?companyName=${companyName}&sector=${sector}`)\n                    const result = await response.json()\n                    setData(result);\n                    console.log(\"Data recieved:\", result)\n                } catch (error) {\n                    console.error('Error fetching chart data:', error);\n                }\n            }\n            fetchData();\n        }, [companyName, sector]\n    );\n    if (!data) {\n        return <div>Loading chart...</div>;\n    }\n    const x_axis = data.past.main.dates;\n    const y_axis = data.past.main.prices;\n    const xlk_x_axis = data.past.XLK.dates;\n    const xlk_y_axis = data.past.XLK.prices;\n    const vgt_x_axis = data.past.VGT.dates;\n    const vgt_y_axis = data.past.VGT.prices;\n    const chart_data = [{\n        name: companyName,\n        x: x_axis,\n        y: y_axis,\n        type:'scatter',\n        mode:'lines',\n        marker: {color:'blue'},\n        }, {\n            name: 'XLK',\n            x: xlk_x_axis,\n            y: xlk_y_axis,\n            type:'scatter', \n            mode:'lines',\n            line: {\n              dash: 'dot',\n              width: 4\n            },\n            marker: {color:'red'},\n        }, {\n            name: 'VGT',\n            x: vgt_x_axis,\n            y: vgt_y_axis,\n            type:'scatter', \n            mode:'lines',\n            line: {\n              dash: 'dot',\n              width: 4\n            },\n            marker: {color:'yellow'},\n        },\n    ];\n    return (\n        <Plot\n            data={chart_data}\n            layout={{\n                width: 1200, \n                height: 400,\n                xaxis: {\n                    title: 'Date',\n                    showgrid: false,\n                },\n                yaxis: {\n                    title: 'Price',\n                    showline: false,\n                },\n                title: `${companyName} Prices`,\n                paper_bgcolor:'rgba(0,0,0,0)',\n                plot_bgcolor:'rgba(0,0,0,0)',\n                font_color:'rgba(245,245,245,0)',\n                }\n            } \n        />\n    );\n}","import React, { useState } from 'react';\nimport Info from './stock-info'\nimport Chart from './chart'\n\nconst options = [\n    { value: \"AAPL\", label: \"Apple\" },\n    { value: \"MSFT\", label: \"Microsoft\" },\n    { value: \"AMZN\", label: \"Amazon\" },\n    { value: \"GOOG\", label: \"Google\" },\n    { value: \"NVDA\", label: \"Nvidia\" },\n    { value: \"INFY.NS\", label: \"Infosys\" },\n];\n\nexport default function Main() {\n    const [company, setCompany] = useState(options[0].value);\n    const [displaySentiment, setDisplaySentiment] = useState(null);\n    const [displayInfo, setDisplayInfo] = useState(null);\n\n    async function handleSubmit(event) {\n        event.preventDefault();\n        if (company) {\n            try {\n                setDisplayInfo(`Loading info...`)\n                const info_response = await fetch(`http://127.0.0.1:8000/getInfo?companyName=${company}`);\n                const info_data = await info_response.json();\n                if (Object.keys(info_data.info).length === 1)\n                    throw new Error()\n                setDisplayInfo(Info(info_data.info));\n            } catch (error) {\n                setDisplayInfo('Failed to get info!')\n            }\n            try {\n                setDisplaySentiment(`Loading sentiment...`)\n                const sentiment_response = await fetch(`http://127.0.0.1:8000/getSentiment?companyName=${company}`);\n                const sentiment_data = await sentiment_response.json();\n                setDisplaySentiment(`${company}'s sentiment is: ${sentiment_data.sentiment}`);\n            \n            } catch (error) {\n                setDisplaySentiment('Failed to get sentiment!')\n            }\n        } else {\n            setDisplaySentiment(\"Please select a company.\");\n        }\n    }\n    function handleChange(event) {\n        setCompany(event.target.value);\n    }\n    return (\n    <div id='main'>\n        <h1>Tanish's stock analysis</h1>\n        <p>Select Company:</p>\n        <form onSubmit={handleSubmit}>\n            <select name=\"companyName\" value={company} onChange={handleChange}> {\n                options.map(\n                    option => (\n                    <option key={option.value} value={option.value}>\n                        {option.label}\n                    </option>\n                    )\n                )\n            }\n            </select>\n            <br/>\n            <button type=\"submit\">Generate Sentiment!!!</button>\n            <br/><br/>\n            {displaySentiment && <div><hr/><h1>Sentiment</h1><p>{displaySentiment}</p></div>}\n            {displayInfo && <div>{displayInfo}</div>}\n        </form>\n        <Chart companyName={company} sector={\"Technology\"}/>\n    </div>\n    );\n}","import React from 'react';\n\nexport default function Info(stock_info) {\n    return (\n        <div>\n            <h2>Current Price</h2>\n            <p>{stock_info.currency} {stock_info.currentPrice}</p>\n            <h2>High/Low</h2>\n            <p>\n                52-week high: {stock_info.fiftyTwoWeekHigh}<br></br>\n                52-week low: {stock_info.fiftyTwoWeekLow}\n            </p>\n        </div>\n    );\n}","import './App.css';\nimport Main from './components/main'\nimport React from 'react';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}